generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  student
  instructor
}

enum Level {
  beginner
  intermediate
  expert
}

model User {
  id                       Int       @id @default(autoincrement())
  email                    String    @unique @db.VarChar(255)
  username                 String?   @unique @db.VarChar(100)
  password                 String?   @db.VarChar(255)
  role                     Role
  firstName                String?   @db.VarChar(100)
  lastName                 String?   @db.VarChar(100)
  avatarUrl                String?   @db.VarChar(500)
  googleId                 String?   @unique
  isVerified               Boolean   @default(false)
  resetPasswordToken       String?   @db.VarChar(255)
  resetPasswordTokenExpiry DateTime?

  refreshToken     RefreshToken[]
  sentMessages     Message[]      @relation("SentMessages")
  receivedMessages Message[]      @relation("ReceivedMessages")

  enrolledAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  studentProfile    StudentProfile?    @relation("StudentUserProfile")
  instructorProfile InstructorProfile? @relation("InstructorUserProfile")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(500)
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model TempSignupOtp {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String
  role      Role
  password  String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Otp {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(255)
  code      String   @db.VarChar(6)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model StudentProfile {
  id         Int     @id @default(autoincrement())
  studentId  Int     @unique
  profilePic String? @db.VarChar(500)
  full_name  String? @db.VarChar(200)
  bio        String? @db.Text
  phone      String? @db.VarChar(20)
  address    String? @db.VarChar(300)

  enrollments     CourseEnrollment[]
  reviews         Review[]
  quizSubmissions StudentQuizSubmission[]
  certificate     Certificate[]

  updatedAt DateTime @updatedAt
  student   User     @relation("StudentUserProfile", fields: [studentId], references: [id], onDelete: Cascade)
}

model InstructorProfile {
  id           Int     @id @default(autoincrement())
  instructorId Int     @unique
  full_name    String? @db.VarChar(200)
  bio          String? @db.Text
  expertise    String? @db.VarChar(200)
  profilePic   String? @db.VarChar(500)

  courses    Course[]
  assignment Assignment[]

  updatedAt DateTime @updatedAt

  instructor User @relation("InstructorUserProfile", fields: [instructorId], references: [id], onDelete: Cascade)
}

model Course {
  id              Int     @id @default(autoincrement())
  instructorId    Int
  categoryId      Int
  subCategoryId   Int
  toolId          Int
  title           String  @db.VarChar(255)
  description     String  @db.Text
  duration        String  @db.VarChar(100)
  level           Level
  enrollmentCount Int     @default(0)
  isPaid          Boolean @default(false)
  price           Int?

  lessons      Lesson[]
  enrollments  CourseEnrollment[]
  reviews      Review[]
  assignment   Assignment[]
  certificates Certificate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  instructor  InstructorProfile @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  category    Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subCategory SubCategory       @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  tool        Tool              @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@index([instructorId])
  @@index([categoryId])
  @@index([subCategoryId])
  @@index([toolId])
}

model Category {
  id           Int     @id @default(autoincrement())
  name         String  @unique
  coursesCount Int     @default(0)
  icon         String?

  courses       Course[]
  subCategories SubCategory[]
}

model SubCategory {
  id           Int    @id @default(autoincrement())
  name         String @unique
  coursesCount Int    @default(0)
  categoryId   Int

  courses Course[]
  tools   Tool[]

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Tool {
  id            Int    @id @default(autoincrement())
  name          String @unique
  coursesCount  Int    @default(0)
  subCategoryId Int

  courses Course[]

  subCategory SubCategory @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
}

model Lesson {
  id        Int      @id @default(autoincrement())
  courseId  Int
  title     String   @db.VarChar(255)
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
}

model CourseEnrollment {
  id         Int      @id @default(autoincrement())
  studentId  Int
  courseId   Int
  enrolledAt DateTime @default(now())

  student StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
  @@map("course_enrollments")
}

model Review {
  id        Int      @id @default(autoincrement())
  studentId Int
  courseId  Int
  rating    Int      @db.Integer
  comment   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  receiverId Int
  content    String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
}

model Assignment {
  id           Int    @id @default(autoincrement())
  courseId     Int
  instructorId Int
  title        String @db.VarChar(255)
  description  String @db.Text

  quizzes Quiz[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  instructor InstructorProfile @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  course     Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([instructorId])
}

model Quiz {
  id            Int                     @id @default(autoincrement())
  assignmentId  Int
  question      String                  @db.Text
  answers       String[]                @db.Text
  correctAnswer Int                     @db.Integer
  submissions   StudentQuizSubmission[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@index([assignmentId])
}

model StudentQuizSubmission {
  id        Int      @id @default(autoincrement())
  studentId Int
  quizId    Int
  answer    Int      @db.Integer
  score     Int      @db.Integer
  createdAt DateTime @default(now())

  student StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  quiz    Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([quizId])
}

model Certificate {
  id          Int    @id @default(autoincrement())
  studentId   Int
  courseId    Int
  studentName String
  url         String

  issuedAt  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course  Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([studentId, courseId])
  @@index([studentId])
  @@index([courseId])
}
